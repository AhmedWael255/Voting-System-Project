
Final Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000386  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000386  0000041a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  00000428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f76  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000729  00000000  00000000  0000146a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b1  00000000  00000000  00001b93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002144  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003eb  00000000  00000000  000021f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000543  00000000  00000000  000025df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002b22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e8       	ldi	r30, 0x86	; 134
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 37       	cpi	r26, 0x76	; 118
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  8a:	0c 94 c1 01 	jmp	0x382	; 0x382 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Blinklight>:
}

void LCD_Clear()
{
	Send_A_Command (0x01);		/* clear display */
	Send_A_Command (0x80);		/* cursor at home position */
  92:	95 9a       	sbi	0x12, 5	; 18
  94:	00 00       	nop
  96:	00 00       	nop
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	80 7c       	andi	r24, 0xC0	; 192
  9c:	82 bb       	out	0x12, r24	; 18
  9e:	08 95       	ret

000000a0 <Send_A_Command>:
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	87 7e       	andi	r24, 0xE7	; 231
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	0e 94 49 00 	call	0x92	; 0x92 <Blinklight>
  ac:	1b ba       	out	0x1b, r1	; 27
  ae:	08 95       	ret

000000b0 <isBusy>:
  b0:	1a ba       	out	0x1a, r1	; 26
  b2:	94 9a       	sbi	0x12, 4	; 18
  b4:	82 b3       	in	r24, 0x12	; 18
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	df 9b       	sbis	0x1b, 7	; 27
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <isBusy+0x16>
  be:	0e 94 49 00 	call	0x92	; 0x92 <Blinklight>
  c2:	df 99       	sbic	0x1b, 7	; 27
  c4:	fc cf       	rjmp	.-8      	; 0xbe <isBusy+0xe>
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 50 00 	call	0xa0	; 0xa0 <Send_A_Command>
  d0:	83 ef       	ldi	r24, 0xF3	; 243
  d2:	91 e0       	ldi	r25, 0x01	; 1
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <isBusy+0x24>
  d8:	00 c0       	rjmp	.+0      	; 0xda <isBusy+0x2a>
  da:	00 00       	nop
  dc:	88 e3       	ldi	r24, 0x38	; 56
  de:	0e 94 50 00 	call	0xa0	; 0xa0 <Send_A_Command>
  e2:	90 e1       	ldi	r25, 0x10	; 16
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <isBusy+0x34>
  e8:	00 c0       	rjmp	.+0      	; 0xea <isBusy+0x3a>
  ea:	8e e0       	ldi	r24, 0x0E	; 14
  ec:	0e 94 50 00 	call	0xa0	; 0xa0 <Send_A_Command>
  f0:	80 e1       	ldi	r24, 0x10	; 16
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <isBusy+0x42>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <isBusy+0x48>
  f8:	08 95       	ret

000000fa <Send_A_Character>:
  fa:	8b bb       	out	0x1b, r24	; 27
  fc:	94 98       	cbi	0x12, 4	; 18
  fe:	93 9a       	sbi	0x12, 3	; 18
 100:	0e 94 49 00 	call	0x92	; 0x92 <Blinklight>
 104:	1b ba       	out	0x1b, r1	; 27
 106:	08 95       	ret

00000108 <Send_A_String>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	ec 01       	movw	r28, r24
 10e:	88 81       	ld	r24, Y
 110:	88 23       	and	r24, r24
 112:	31 f0       	breq	.+12     	; 0x120 <Send_A_String+0x18>
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	0e 94 7d 00 	call	0xfa	; 0xfa <Send_A_Character>
 11a:	89 91       	ld	r24, Y+
 11c:	81 11       	cpse	r24, r1
 11e:	fb cf       	rjmp	.-10     	; 0x116 <Send_A_String+0xe>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <location>:
 126:	e6 2f       	mov	r30, r22
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	e1 5a       	subi	r30, 0xA1	; 161
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	81 58       	subi	r24, 0x81	; 129
 130:	90 81       	ld	r25, Z
 132:	89 0f       	add	r24, r25
 134:	0e 94 50 00 	call	0xa0	; 0xa0 <Send_A_Command>
 138:	08 95       	ret

0000013a <LCD_ShowData>:
}

void LCD_ShowData()
{
	location(2,1);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	0e 94 93 00 	call	0x126	; 0x126 <location>
	Send_A_String("YES");
 142:	82 e6       	ldi	r24, 0x62	; 98
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	85 ea       	ldi	r24, 0xA5	; 165
 14c:	9e e0       	ldi	r25, 0x0E	; 14
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_ShowData+0x14>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_ShowData+0x1a>
 154:	00 00       	nop
	_delay_ms(15);
	
	location(7,1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	87 e0       	ldi	r24, 0x07	; 7
 15a:	0e 94 93 00 	call	0x126	; 0x126 <location>
	Send_A_String("NO");
 15e:	86 e6       	ldi	r24, 0x66	; 102
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 166:	85 ea       	ldi	r24, 0xA5	; 165
 168:	9e e0       	ldi	r25, 0x0E	; 14
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_ShowData+0x30>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_ShowData+0x36>
 170:	00 00       	nop
	_delay_ms(15);
	
	location(12,1);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	8c e0       	ldi	r24, 0x0C	; 12
 176:	0e 94 93 00 	call	0x126	; 0x126 <location>
	Send_A_String("NONE");
 17a:	89 e6       	ldi	r24, 0x69	; 105
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 182:	85 ea       	ldi	r24, 0xA5	; 165
 184:	9e e0       	ldi	r25, 0x0E	; 14
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_ShowData+0x4c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_ShowData+0x52>
 18c:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 18e:	4a e0       	ldi	r20, 0x0A	; 10
 190:	64 e7       	ldi	r22, 0x74	; 116
 192:	70 e0       	ldi	r23, 0x00	; 0
 194:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <acc>
 198:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <acc+0x1>
 19c:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
	_delay_ms(15);
	
	itoa(acc,pos,10);    /*Convert integer numbers to strings to print it on the LCD*/
	location(3,2);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	0e 94 93 00 	call	0x126	; 0x126 <location>
	Send_A_String(pos);
 1a8:	84 e7       	ldi	r24, 0x74	; 116
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 1b0:	85 ea       	ldi	r24, 0xA5	; 165
 1b2:	9e e0       	ldi	r25, 0x0E	; 14
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <LCD_ShowData+0x7a>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <LCD_ShowData+0x80>
 1ba:	00 00       	nop
 1bc:	4a e0       	ldi	r20, 0x0A	; 10
 1be:	64 e7       	ldi	r22, 0x74	; 116
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ref>
 1c6:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ref+0x1>
 1ca:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
	_delay_ms(15);
	
	itoa(ref,pos,10);
	location(8,2);
 1ce:	62 e0       	ldi	r22, 0x02	; 2
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	0e 94 93 00 	call	0x126	; 0x126 <location>
	Send_A_String(pos);
 1d6:	84 e7       	ldi	r24, 0x74	; 116
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 1de:	85 ea       	ldi	r24, 0xA5	; 165
 1e0:	9e e0       	ldi	r25, 0x0E	; 14
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <LCD_ShowData+0xa8>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <LCD_ShowData+0xae>
 1e8:	00 00       	nop
 1ea:	4a e0       	ldi	r20, 0x0A	; 10
 1ec:	64 e7       	ldi	r22, 0x74	; 116
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 1f4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 1f8:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
	_delay_ms(15);
	
	itoa(neu,pos,10);
	location(13,2);
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	8d e0       	ldi	r24, 0x0D	; 13
 200:	0e 94 93 00 	call	0x126	; 0x126 <location>
	Send_A_String(pos);
 204:	84 e7       	ldi	r24, 0x74	; 116
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 20c:	85 ea       	ldi	r24, 0xA5	; 165
 20e:	9e e0       	ldi	r25, 0x0E	; 14
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <LCD_ShowData+0xd6>
 214:	00 c0       	rjmp	.+0      	; 0x216 <LCD_ShowData+0xdc>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <main>:

#define F_CPU 16000000

int main(void)
{
	DDRA=0XFF;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	8a bb       	out	0x1a, r24	; 26
	DDRB=0X00;
 21e:	17 ba       	out	0x17, r1	; 23
	DDRD=0b00111000;
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	81 bb       	out	0x11, r24	; 17
	PORTD |=(1 << 0);
 224:	90 9a       	sbi	0x12, 0	; 18
	PORTD |=(1 << 1);
 226:	91 9a       	sbi	0x12, 1	; 18
	PORTD |=(1 << 2);
 228:	92 9a       	sbi	0x12, 2	; 18
	PORTB |=(1 << 0);
 22a:	c0 9a       	sbi	0x18, 0	; 24
	PORTB |=(1 << 1);
 22c:	c1 9a       	sbi	0x18, 1	; 24
	PORTB |=(1 << 2);
 22e:	c2 9a       	sbi	0x18, 2	; 24
	PORTB |=(1 << 3);
 230:	c3 9a       	sbi	0x18, 3	; 24
	PORTB |=(1 << 4);
 232:	c4 9a       	sbi	0x18, 4	; 24
	PORTB |=(1 << 5);
 234:	c5 9a       	sbi	0x18, 5	; 24
    int acc = 0, ref = 0, neu = 0, i =0, j =0, k =0;
	
	/* LCD initialization*/
	isBusy();
 236:	0e 94 58 00 	call	0xb0	; 0xb0 <isBusy>
	
	/*The Printed Text OR Numbers on the LCD Screen*/
	LCD_ShowData();
 23a:	0e 94 9d 00 	call	0x13a	; 0x13a <LCD_ShowData>
	PORTB |=(1 << 1);
	PORTB |=(1 << 2);
	PORTB |=(1 << 3);
	PORTB |=(1 << 4);
	PORTB |=(1 << 5);
    int acc = 0, ref = 0, neu = 0, i =0, j =0, k =0;
 23e:	e1 2c       	mov	r14, r1
 240:	f1 2c       	mov	r15, r1
 242:	00 e0       	ldi	r16, 0x00	; 0
 244:	10 e0       	ldi	r17, 0x00	; 0
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	d0 e0       	ldi	r29, 0x00	; 0
					
				}
			}
		}
}*/
		if(!(PINB&(1<<PB0)) || !(PINB&(1<<PB3)) || !(PIND&(1<<PD0))) 
 24a:	b0 9b       	sbis	0x16, 0	; 22
 24c:	04 c0       	rjmp	.+8      	; 0x256 <main+0x3c>
 24e:	b3 9b       	sbis	0x16, 3	; 22
 250:	02 c0       	rjmp	.+4      	; 0x256 <main+0x3c>
 252:	80 99       	sbic	0x10, 0	; 16
 254:	1b c0       	rjmp	.+54     	; 0x28c <main+0x72>
		{ 
			while(!(PINB &(1<<PINB0)) || !(PINB &(1<<PINB3)) || !(PIND &(1<<PIND0)))  {};   
 256:	b0 9b       	sbis	0x16, 0	; 22
 258:	fe cf       	rjmp	.-4      	; 0x256 <main+0x3c>
 25a:	b3 9b       	sbis	0x16, 3	; 22
 25c:	fc cf       	rjmp	.-8      	; 0x256 <main+0x3c>
 25e:	80 9b       	sbis	0x10, 0	; 16
 260:	fa cf       	rjmp	.-12     	; 0x256 <main+0x3c>
			acc++;
 262:	21 96       	adiw	r28, 0x01	; 1
 264:	4a e0       	ldi	r20, 0x0A	; 10
 266:	64 e7       	ldi	r22, 0x74	; 116
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	ce 01       	movw	r24, r28
 26c:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
			itoa(acc,pos,10);
			location(3,2);
 270:	62 e0       	ldi	r22, 0x02	; 2
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	0e 94 93 00 	call	0x126	; 0x126 <location>
			Send_A_String(pos);
 278:	84 e7       	ldi	r24, 0x74	; 116
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 280:	85 ea       	ldi	r24, 0xA5	; 165
 282:	9e e0       	ldi	r25, 0x0E	; 14
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x6a>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x70>
 28a:	00 00       	nop
			_delay_ms(15);
		}
		
		if(!(PINB&(1<<PB1)) || !(PINB&(1<<PB4)) || !(PIND&(1<<PD1)))
 28c:	b1 9b       	sbis	0x16, 1	; 22
 28e:	04 c0       	rjmp	.+8      	; 0x298 <main+0x7e>
 290:	b4 9b       	sbis	0x16, 4	; 22
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0x7e>
 294:	81 99       	sbic	0x10, 1	; 16
 296:	1c c0       	rjmp	.+56     	; 0x2d0 <main+0xb6>
		{
				
			while(!(PINB &(1<<PINB1)) || !(PINB &(1<<PINB4)) || !(PIND &(1<<PIND1))){ };
 298:	b1 9b       	sbis	0x16, 1	; 22
 29a:	fe cf       	rjmp	.-4      	; 0x298 <main+0x7e>
 29c:	b4 9b       	sbis	0x16, 4	; 22
 29e:	fc cf       	rjmp	.-8      	; 0x298 <main+0x7e>
 2a0:	81 9b       	sbis	0x10, 1	; 16
 2a2:	fa cf       	rjmp	.-12     	; 0x298 <main+0x7e>
			ref++;
 2a4:	0f 5f       	subi	r16, 0xFF	; 255
 2a6:	1f 4f       	sbci	r17, 0xFF	; 255
 2a8:	4a e0       	ldi	r20, 0x0A	; 10
 2aa:	64 e7       	ldi	r22, 0x74	; 116
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	c8 01       	movw	r24, r16
 2b0:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
			itoa(ref,pos,10);
			location(8,2);
 2b4:	62 e0       	ldi	r22, 0x02	; 2
 2b6:	88 e0       	ldi	r24, 0x08	; 8
 2b8:	0e 94 93 00 	call	0x126	; 0x126 <location>
			Send_A_String(pos);
 2bc:	84 e7       	ldi	r24, 0x74	; 116
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 2c4:	85 ea       	ldi	r24, 0xA5	; 165
 2c6:	9e e0       	ldi	r25, 0x0E	; 14
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <main+0xae>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0xb4>
 2ce:	00 00       	nop
			_delay_ms(15);
		}
				
		if(!(PINB&(1<<PB2)) || !(PINB&(1<<PB5)) || !(PIND&(1<<PD2)))
 2d0:	b2 9b       	sbis	0x16, 2	; 22
 2d2:	04 c0       	rjmp	.+8      	; 0x2dc <main+0xc2>
 2d4:	b5 9b       	sbis	0x16, 5	; 22
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <main+0xc2>
 2d8:	82 99       	sbic	0x10, 2	; 16
 2da:	b7 cf       	rjmp	.-146    	; 0x24a <main+0x30>
		{
			while(!(PINB &(1<<PINB2)) || !(PINB &(1<<PINB5)) || !(PIND &(1<<PIND2))){};
 2dc:	b2 9b       	sbis	0x16, 2	; 22
 2de:	fe cf       	rjmp	.-4      	; 0x2dc <main+0xc2>
 2e0:	b5 9b       	sbis	0x16, 5	; 22
 2e2:	fc cf       	rjmp	.-8      	; 0x2dc <main+0xc2>
 2e4:	82 9b       	sbis	0x10, 2	; 16
 2e6:	fa cf       	rjmp	.-12     	; 0x2dc <main+0xc2>
			neu++;
 2e8:	9f ef       	ldi	r25, 0xFF	; 255
 2ea:	e9 1a       	sub	r14, r25
 2ec:	f9 0a       	sbc	r15, r25
 2ee:	4a e0       	ldi	r20, 0x0A	; 10
 2f0:	64 e7       	ldi	r22, 0x74	; 116
 2f2:	70 e0       	ldi	r23, 0x00	; 0
 2f4:	c7 01       	movw	r24, r14
 2f6:	0e 94 8c 01 	call	0x318	; 0x318 <__itoa_ncheck>
			itoa(neu,pos,10);
			location(13,2);
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	8d e0       	ldi	r24, 0x0D	; 13
 2fe:	0e 94 93 00 	call	0x126	; 0x126 <location>
			Send_A_String(pos);
 302:	84 e7       	ldi	r24, 0x74	; 116
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	0e 94 84 00 	call	0x108	; 0x108 <Send_A_String>
 30a:	85 ea       	ldi	r24, 0xA5	; 165
 30c:	9e e0       	ldi	r25, 0x0E	; 14
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0xf4>
 312:	00 c0       	rjmp	.+0      	; 0x314 <main+0xfa>
 314:	00 00       	nop
 316:	99 cf       	rjmp	.-206    	; 0x24a <main+0x30>

00000318 <__itoa_ncheck>:
 318:	bb 27       	eor	r27, r27
 31a:	4a 30       	cpi	r20, 0x0A	; 10
 31c:	31 f4       	brne	.+12     	; 0x32a <__itoa_ncheck+0x12>
 31e:	99 23       	and	r25, r25
 320:	22 f4       	brpl	.+8      	; 0x32a <__itoa_ncheck+0x12>
 322:	bd e2       	ldi	r27, 0x2D	; 45
 324:	90 95       	com	r25
 326:	81 95       	neg	r24
 328:	9f 4f       	sbci	r25, 0xFF	; 255
 32a:	0c 94 98 01 	jmp	0x330	; 0x330 <__utoa_common>

0000032e <__utoa_ncheck>:
 32e:	bb 27       	eor	r27, r27

00000330 <__utoa_common>:
 330:	fb 01       	movw	r30, r22
 332:	55 27       	eor	r21, r21
 334:	aa 27       	eor	r26, r26
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	aa 1f       	adc	r26, r26
 33c:	a4 17       	cp	r26, r20
 33e:	10 f0       	brcs	.+4      	; 0x344 <__utoa_common+0x14>
 340:	a4 1b       	sub	r26, r20
 342:	83 95       	inc	r24
 344:	50 51       	subi	r21, 0x10	; 16
 346:	b9 f7       	brne	.-18     	; 0x336 <__utoa_common+0x6>
 348:	a0 5d       	subi	r26, 0xD0	; 208
 34a:	aa 33       	cpi	r26, 0x3A	; 58
 34c:	08 f0       	brcs	.+2      	; 0x350 <__utoa_common+0x20>
 34e:	a9 5d       	subi	r26, 0xD9	; 217
 350:	a1 93       	st	Z+, r26
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	79 f7       	brne	.-34     	; 0x334 <__utoa_common+0x4>
 356:	b1 11       	cpse	r27, r1
 358:	b1 93       	st	Z+, r27
 35a:	11 92       	st	Z+, r1
 35c:	cb 01       	movw	r24, r22
 35e:	0c 94 b1 01 	jmp	0x362	; 0x362 <strrev>

00000362 <strrev>:
 362:	dc 01       	movw	r26, r24
 364:	fc 01       	movw	r30, r24
 366:	67 2f       	mov	r22, r23
 368:	71 91       	ld	r23, Z+
 36a:	77 23       	and	r23, r23
 36c:	e1 f7       	brne	.-8      	; 0x366 <strrev+0x4>
 36e:	32 97       	sbiw	r30, 0x02	; 2
 370:	04 c0       	rjmp	.+8      	; 0x37a <strrev+0x18>
 372:	7c 91       	ld	r23, X
 374:	6d 93       	st	X+, r22
 376:	70 83       	st	Z, r23
 378:	62 91       	ld	r22, -Z
 37a:	ae 17       	cp	r26, r30
 37c:	bf 07       	cpc	r27, r31
 37e:	c8 f3       	brcs	.-14     	; 0x372 <strrev+0x10>
 380:	08 95       	ret

00000382 <_exit>:
 382:	f8 94       	cli

00000384 <__stop_program>:
 384:	ff cf       	rjmp	.-2      	; 0x384 <__stop_program>
